library(netsimulatR)
library(netsimulatR)
library(igraph)
a = sample_pa(10, directed = F)
a
a = sample_pa(10, directed = T)
a
a = sample_pa(10, directed = F)
a
set.seed(10)
a = sample_pa(10, directed = F)
a
set.seed(10)
a = sample_pa(10, directed = F, power = 2)
a
set.seed(10)
a = sample_pa(30, directed = F, power = 2)
a
a = sample_pa(30, directed = F, power = 2)
a
a = sample_pa(30, directed = F, power = 0.5)
a
a = sample_pa(30, directed = F, power = 2.5)
a
a = sample_pa(300, directed = F, power = 2.5)
a
a = sample_pa(300, directed = F,m = 300)
a
a = sample_pa(10, directed = F,m = 2)
a
plot(hist(degree(a)))
a = sample_pa(10, directed = F)
plot(hist(degree(a)))
a = sample_pa(100, directed = F,m = 2)
plot(hist(degree(a)))
a
a = sample_pa(500, directed = F,m = 2)
plot(hist(degree(a)))
a = sample_pa(500, directed = F,m = 1)
plot(hist(degree(a)))
a = sample_pa(500, directed = F,m = 5)
a
plot(hist(degree(a)))
500/100
a = sample_pa(10, directed = F,m = 10/100)
a
a = sample_pa(10, directed = F,m = 1)
a = sample_pa(10, directed = F)
a
a = sample_pa(10, directed = F,m = 10/10)
a
a = sample_pa(100, directed = F,m = 100/10)
a
(100*99)/2
(100*99)/2
a
(100*99)/2
950/4950
a = sample_pa(500, directed = F,m = 500/10)
a
(500*499)/2
23725/124750
a = sample_pa(500, directed = F,m = 500/50)
a
4945/124750
500/50
a = sample_pa(500, directed = F,m = 500/50, p = 1)
a = sample_pa(500, directed = F,m = 500/50, power = 2)
a
plot(hist(degree(a)))
a = sample_pa(500, directed = F,m = 500/50)
plot(hist(degree(a)))
500*9
500*10
5000-50
a = sample_pa(300, directed = F,m = 300/50)
a
300*60
300*6
(300*6)-30
1779/90000
library(netsimulatR)
library(netsimulatR)
sample_ic(p=20, m = 2)
a = sample_ic(p=20, m = 2)
library(netsimulatR)
a = sample_ic()
a
a = sample_ic(p = 20, m = 1.2)
a
matrix(sample(c(0,1,2), 100, replace = T), nrow = 10)
## construct a sparse inverse covariance matrix
sample_ic <- function(p = 10, m=1, type = "scale-free" ,min_support = c(-0.4, 0.1), max_support = c(-0.1, 0.4), seed = 1){
set.seed(seed)
if(type == "scale-free"){
pg = igraph::sample_pa(p, m = m, directed = F)
}else{
pg = igraph::sample_gnm(p, m = p*3)
}
n_edges = igraph::ecount(pg)
g <- igraph::as_adj(pg)
g <- Matrix::triu(g)
e_vals = runif(n_edges, min = min_support, max = max_support)
g[g!=0] <- e_vals
g <- convert_psd(g)
if(!all(eigen(g)$values >=0)){
cat("PSD check unsuccessful - negative eigenvalues")
}else{
cat("PSD check was successful - all eigenvalues are greater than or equal to 0")
}
list(graph = pg, theta = g)
}
library(netsimulatR)
library(netsimulatR)
